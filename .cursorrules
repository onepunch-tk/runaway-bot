## NestJS 규칙:

-   **모듈식 아키텍처를 사용하세요.**
-   **API를 모듈로 캡슐화 하세요.:**
    -   **주요 도메인/라우트당 하나의 모듈을 만드세요.**
    -   **해당 라우트에 대한 하나의 컨트롤러를 작성하세요.**
    -   **보조 라우트가 필요한 경우 추가 컨트롤러를 작성하세요.**
    -   **models 폴더 구조:**
        -   **입력값 검증은 class-validator로 검증된 DTO를 사용하세요.**
        -   **출력값은 간단한 타입으로 선언하세요.**
    -   **services 모듈:**
        -   **비즈니스 로직은 서비스 레이어에 작성하세요.**
        -   **데이터 영속성 처리는 서비스 레이어에서 담당하세요.**
        -   **각 엔티티당 하나의 서비스를 작성하세요.**
    -   **core 모듈 구성:**
        -   **전역 예외 처리는 필터를 사용하세요.**
        -   **공통 요청 처리는 미들웨어를 사용하세요.**
        -   **인증/인가는 가드를 사용하세요.**
        -   **요청/응답 변환은 인터셉터를 사용하세요.**
    -   **common 모듈 구성:**
        -   **재사용 가능한 유틸리티는 여기에 작성하세요.**
        -   **여러 모듈에서 공유하는 비즈니스 로직은 여기에 작성하세요.**
---

## youtube-dl-exec 라이브러리:
-   **문제 해결 방법으로 ytdl-core 라이브러리를 제안하지 마세요.**
-   **라이브러리는 import 문으로 불러오세요.**
-   **.exec 메써드를 사용하여 discordjs, discordjs/voice 라이브러리에 음성 서비스에 연결하세요.**
-   예:
    ```typescript
    import youtubedl from 'youtube-dl-exec';
    
     const subprocess = youtubedl.exec(videoUrl, {
        output: '-', // stdout으로 출력
        extractAudio: true,
        audioFormat: 'mp3',
        noWarnings: true,
      });

      //...

      resource = createAudioResource(subprocess.stdout, {
          inputType: StreamType.Arbitrary,
        });

      const connection = joinVoiceChannel({
        channelId: voiceChannel.id,
        guildId: voiceChannel.guild.id,
        adapterCreator: voiceChannel.guild.voiceAdapterCreator,
      });

      const audioPlayer = createAudioPlayer({
        behaviors: {
          noSubscriber: NoSubscriberBehavior.Pause,
        },
      });

      connection.subscribe(audioPlayer);
      audioPlayer.play(resource);  
    ```

## TypeScript 사용: TS 사용 권장 및 기본 규칙

-   **프로젝트 전반에 TypeScript를 사용하세요.**
-   **각 변수와 함수(매개변수 및 반환값)은 타입을 항상 선언하세요.**
    - **any 타입 사용을 피하세요.**
    - **필요한 타입을 생성하세요.**
-   **JsDoc을 사용하여 클래스와 함수,메써드를 문서화하세요.**
-   **파일당 하나의 export만 사용하세요.**

---

## TypeScript 인터페이스 정의 규칙: 'I' 접두사 사용

-   **인터페이스 정의 시 이름 앞에 'I'를 접두사로 추가하세요.**
    -   예시:
        ```typescript
        export interface IComment {
            id: string
            text: string
            author: string
        }
        ```

## TypeScript 명명 규칙:

-   **클래스는 PascalCase를 사용하세요.**
-   **파일 이름은 소문자로 작성하세요.**
-   **변수,함수,메써드는 camelCase를 사용하세요.**
-   **파일 및 디렉토리 이름은 kebab-case를 사용하세요.**
-   **환경 변수는 UPPER_SNAKE_CASE를 사용하세요.**
    - **매직 넘버를 피하고 상수를 정의하세요.**
-   **모든 함수,메써드는 동사로 시작하세요.**
-   **boolean 변수는 동사를 사용합니다.**
    -   예시:
        ```typescript
        const isLoading = true
        const hasError = false
        const canDelete = false
        등등...
        ```
-   **약어 대신 완전한 단어를 사용하고 올바른 철자를 사용하세요.**
    -   **API, URL등과 같은 표준 약어는 예외입니다.**
    -   **잘 알려진 약어의 경우는 예외 입니다.:**
        - **반복문의 i,j**
        - **에러의 err**
        - **컨텍스트의 ctx**
        - **미들웨어 함수,메써드 매개변수의 req,res,next**

## TypeScript 함수,메써드 규칙:

-   **단일 목적을 가진 짧은 함수,메써드를 작성합니다. 20개 미만의 명령어**
-   **함수,메써드 이름은 동사와 다른 것을 조합 합니다.**
    - **boolean을 반환하는 경우 isX, hasX, canX등을 사용합니다.**
    - **아무것도 반환하지 않는 경우 executeX, saveX 등을 사용합니다.**
-   **다음을 통해 블록 중첩을 피합니다:**
    - **조기 검사와 반환**
    - **유틸리티 함수,메써드로 추출**
-   **함수 중첩을 피하기 위해 고차 함수(map, filter, reduce 등)를 사용하세요.**
    - **간단한 함수,메써드(3개 미만의 명령어)는 화살표 함수를 사용하세요.**
    - **간단하지 않은 함수,메써드는 이름이 있는 함수,메써드를 사용하세요.**
-   **null이나 undefined 검사 대신 기본 매개변수 값을 사용하세요.**
-   **RO-RO를 사용하여 함수,메써드 매개변수를 줄입니다.**
    - **여러 매개변수를 전달할 때는 객체를 사용하세요.**
    - **결과를 반환할 때는 객체를 사용하세요.**
    - **입력 인수와 출력에 대한 필요한 타입을 선언하세요.**
-   **단일 수준의 추상화를 사용하세요.**

## TypeScript 클래스 규칙:
-   **SOLID 원칙을 따르세요.**
-   **상속보다 컴포지션을 선호합니다.**
-   **constracts을 정의할 때는 인터페이스를 사용하세요.**
-   **단일 목적을 가진 작은 클래스를 작성하세요.:**
    - **200개 미만의 명령어**
    - **10개 미만의 공개 함수,메써드**
    - **10개 미만의 속성**

---

## Git 커밋 메시지 작성 규칙

**포맷:**

```
<type>: <subject>

<body>
```

**커밋 타입 (Type):**

-   feat: 새로운 기능 추가
-   fix: 버그 수정
-   docs: 문서 수정
-   style: 코드 포맷팅, 세미콜론 누락, 코드 변경이 없는 경우
-   refactor: 코드 리팩토링
-   test: 테스트 코드, 리팩토링 테스트 코드 추가
-   chore: 빌드 업무 수정, 패키지 매니저 수정

**제목 (Subject):**

-   변경 사항에 대한 간단한 설명
-   50자 이내로 작성
-   마침표 없이 작성
-   현재 시제 사용

**본문 (Body):**

-   변경 사항에 대한 자세한 설명
-   어떻게 보다는 무엇을, 왜 변경했는지 설명
-   여러 줄의 메시지를 작성할 땐 "-"로 구분

**예시:**

```plaintext
feat: 로그인 화면 키보드 UX 개선
- TextInput ref를 사용하여 자동 포커스 기능 추가
- returnKeyType 설정으로 키보드 엔터키 동작 개선
- 전화번호 입력 후 자동으로 비밀번호 입력창으로 포커스 이동
- 비밀번호 입력 후 엔터키로 로그인 가능하도록 개선
```

---

## ORM: Drizzle 사용

-   **데이터베이스 작업을 위해 ORM으로 Drizzle을 사용하세요.**
-   **Drizzle을 사용하여 데이터베이스 모델을 정의하고, CRUD 작업을 구현하세요.**